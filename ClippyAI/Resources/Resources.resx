<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ClipboardContent" xml:space="preserve">
    <value>Clipboard Content:</value>
  </data>
  <data name="ClippyAI" xml:space="preserve">
    <value>ClippyAI</value>
  </data>
  <data name="Task" xml:space="preserve">
    <value>Task</value>
  </data>
  <data name="TaskLabel" xml:space="preserve">
    <value>What I should do for you:</value>
  </data>
  <data name="TaskStart" xml:space="preserve">
    <value>Execute</value>
  </data>
  <data name="TaskStop" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="AutoMode" xml:space="preserve">
    <value>Auto Mode:</value>
  </data>
  <data name="Enabled" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="Disabled" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="Configuration" xml:space="preserve">
    <value>Configuration</value>
  </data>
  <data name="Response" xml:space="preserve">
    <value>Response:</value>
  </data>
  <data name="Keyboard" xml:space="preserve">
    <value>Keyboard (experimental)</value>
  </data>
  <data name="Clipboard" xml:space="preserve">
    <value>Clipboard</value>
  </data>
  <data name="Task_1" xml:space="preserve">
    <value>Write a response to the email.</value>
  </data>
  <data name="Task_2" xml:space="preserve">
    <value>Write a detailed response to the email.</value>
  </data>
  <data name="Task_3" xml:space="preserve">
    <value>Write a response to the email and graciously agree.</value>
  </data>
  <data name="Task_4" xml:space="preserve">
    <value>Write a response to the email and politely decline.</value>
  </data>
  <data name="Task_5" xml:space="preserve">
    <value>Write a response to the email and request more information.</value>
  </data>
  <data name="Task_6" xml:space="preserve">
    <value>Write a response to the email and request a meeting appointment.</value>
  </data>
  <data name="Task_7" xml:space="preserve">
    <value>Write a response to the email and say that you will take care of the problem.</value>
  </data>
  <data name="Task_8" xml:space="preserve">
    <value>Write a response to the email and say that you cannot solve the problem and refer to Person X.</value>
  </data>
  <data name="Task_9" xml:space="preserve">
    <value>Write a response to the email and request a feedback.</value>
  </data>
  <data name="Task_10" xml:space="preserve">
    <value>Write a response to the email and request a confirmation.</value>
  </data>
  <data name="Task_11" xml:space="preserve">
    <value>Write a response to the email and request a rescheduling.</value>
  </data>
  <data name="Task_12" xml:space="preserve">
    <value>Explain what this is as precisely as possible.</value>
  </data>
  <data name="Task_13" xml:space="preserve">
    <value>Explain where the error lies and how to fix it.</value>
  </data>
  <data name="Task_14" xml:space="preserve">
    <value>Explain how it can be improved.</value>
  </data>
  <data name="Task_15" xml:space="preserve">
    <value>Custom Task</value>
  </data>
  <data name="Task_16" xml:space="preserve">
    <value>Translate this text to English.</value>
  </data>
  <data name="Task_17" xml:space="preserve">
    <value>Translate this text to German.</value>
  </data>
  <data name="Task_18" xml:space="preserve">
    <value>Translate this text to French.</value>
  </data>
  <data name="Task_19" xml:space="preserve">
    <value>Translate this text to Spanish.</value>
  </data>
  <data name="Task_20" xml:space="preserve">
    <value>Write a response to the email and tell that you already solved the problem.</value>
  </data>
  <data name="Task_21" xml:space="preserve">
    <value>Write a response to the email and tell that you are working on the problem.</value>
  </data>
  <data name="Task_22" xml:space="preserve">
    <value>Summarize this text.</value>
  </data>
  <data name="Data" xml:space="preserve">
    <value>Data</value>
  </data>
  <data name="Output" xml:space="preserve">
    <value>Output:</value>
  </data>
  <data name="PleaseWait" xml:space="preserve">
    <value>Please wait...</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language:</value>
  </data>
  <data name="OllamaUrl" xml:space="preserve">
    <value>Ollama URL:</value>
  </data>
  <data name="Model" xml:space="preserve">
    <value>Model:</value>
  </data>
  <data name="SelectTask" xml:space="preserve">
    <value>Please select a task!</value>
  </data>
  <data name="SelectModel" xml:space="preserve">
    <value>Please select a model!</value>
  </data>
  <data name="TaskCompleted" xml:space="preserve">
    <value>Your task has been completed and copied to the clipboard!
Result:
</value>
  </data>
  <data name="TaskView" xml:space="preserve">
    <value>View</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Pull" xml:space="preserve">
    <value>Pull</value>
  </data>
</root>